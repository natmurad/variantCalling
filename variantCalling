###############################################################################
##########################          CONFIG          ###########################
###############################################################################
configfile: "config.yaml"

##############################################################################
##########################         LIBRARIES        ###########################
###############################################################################
import io 
import os
import pandas as pd
import pathlib
from snakemake.exceptions import print_exception, WorkflowError

###############################################################################
#######################          SET VARIABLES          #######################
###############################################################################
STEP1 = config["step1"] # s2B - sam to bam conversion
STEP2 = config["step2"] # variant calling
STEP3 = config["step3"] # compress and index
STEP4 = config["step4"] # filter and back to vcf with plink
STEP5 = config["step5"] # family intersections
INPUTDIR = config["raw_data_dir"] #  /home/user/raw_data - sam files
DIR = config["base_dir"] # /home/user/
OUT_STEP1 = os.path.join(DIR, STEP1) # /home/user/s2B
OUT_STEP2 = os.path.join(DIR, STEP2) # /home/user/vC
OUT_STEP3 = os.path.join(DIR, STEP3) # /home/user/ciVCF
OUT_STEP4 = os.path.join(DIR, STEP4) # /home/user/filterVCF
OUT_STEP5 = os.path.join(DIR, STEP4) # /home/user/isec
SAMPLE = config["samples"].split()
REF_GENOME = config["ref_genome"]

###############################################################################
##########################         RULE ALL         ###########################
###############################################################################

rule all:
    input:
        out_bam = expand("{out_dir1}/{sample}.bam", out_dir1 = OUT_STEP1, sample=SAMPLE),
        out_bam_sorted = expand("{out_dir1}/{sample}.sorted.bam", out_dir1 = OUT_STEP1, sample=SAMPLE),
        bam_index = expand("{out_dir1}/{sample}.sorted.bam.bai", out_dir1 = OUT_STEP1, sample=SAMPLE),
        out_freebayes = expand("{out_dir2}/{sample}.vcf", out_dir2 = OUT_STEP2, sample=SAMPLE),
        out_bgzip = expand("{out_dir3}/{sample}.vcf.gz", out_dir3 = OUT_STEP3, sample=SAMPLE),
        out_tabix = expand("{out_dir3}/{sample}.vcf.gz.tbi", out_dir3 = OUT_STEP3, sample=SAMPLE),
        out_vcffilter = expand("{out_dir4}/{sample}filter.vcf.gz.tbi", out_dir4 = OUT_STEP4, sample=SAMPLE),
        out_isec = expand("{out_dir5}/{sample}.vcf.gz.tbi", out_dir5 = OUT_STEP5, sample=SAMPLE)     

###############################################################################
##########################   CONVERT SAM TO BAM     ###########################
###############################################################################

rule sam2bam:
    input:
        sam_files = INPUTDIR + "{sample}.sam"
    output:
        bam_files = OUT_STEP1 + "/{sample}.bam"
    shell:"""
        samtools view -bS {input} > {output}
    """

###############################################################################
##########################       SORT BAM           ###########################
###############################################################################

rule sort_bam:
    input:
        OUT_STEP1 + "/{sample}.bam"
    output:
        OUT_STEP1 + "/{sample}.sorted.bam"
    threads:
        50
    shell:"""
        samtools sort -@ 50 {input} -o {output}
    """
        
###############################################################################
##########################   CREATE BAM INDEX       ###########################
###############################################################################

rule bam_index:
    input:
        OUT_STEP1 + "/{sample}.sorted.bam"
    output:
        OUT_STEP1 + "/{sample}.sorted.bam.bai"
    threads:
        50
    shell:"""
        samtools index {input} {output}
    """

###############################################################################
############################      FREEBAYES       #############################
###############################################################################  

rule freebayes:
    input:
        ref=REF_GENOME,
        samples= OUT_STEP1 + "/{sample}.sorted.bam",
        indexes=  OUT_STEP1 + "/{sample}.sorted.bam.bai"
    output:
        OUT_STEP2 + "/{sample}.vcf"  # either .vcf or .bcf
    threads:
        50
    shell:"""
        freebayes -f {input.ref} {input.samples} > {output}
    """

###############################################################################
##########################       COMPRESS VCF       ###########################
###############################################################################

rule compress_vcf:
    input:
        OUT_STEP2 + "/{sample}.vcf",
    output:
        OUT_STEP3 + "/{sample}.vcf.gz"
    threads:
        50
    shell:"""
        bgzip -c {input} > {output}
    """

###############################################################################
##########################       INDEX VCF          ###########################
###############################################################################

rule index_vcf:
    input:
        samples= OUT_STEP3 + "/{sample}.vcf.gz",
    output:
        OUT_STEP3 + "/{sample}.vcf.gz.tbi"
    threads:
        50
    shell:"""
        tabix -p vcf {input}
    """

###############################################################################
################       FILTER VARIANTS WITH PLINK          ####################
###############################################################################

rule index_vcf:
    input:
        vcfgz = OUT_STEP4 + "/{sample}.vcf.gz",
    output:
        out = "/{sample}filter.vcf.gz"
    params:
        sample = "{sample}filter",
        maf = 0.03,
        hwe = 0.001,
        mind = 0.1,
        geno = 0.1
    threads:
        50
    shell:"""
        plink --vcf {input.vcfgz} --maf {params.maf} --hwe {params.hwe} \
            --mind {params.mind} --geno {params.geno} --allow-extra-chr --make-bed --out {params.sample}
    """

###############################################################################
################       CONVERT BED TO VCF - PLINK          ####################
###############################################################################

rule index_vcf:
    input:
        bed = OUT_STEP4 + "/{sample}filter.bed",
    output:
        vcf = OUT_STEP4 + "/{sample}.vcf.gz"
    threads:
        50
    shell:"""
        plink --bfile {input.bed} --allow-extra-chr --recode vcf --out {output.vcf}
    """

###############################################################################
##################         INDEX FILTERED VCF              ####################
###############################################################################

rule index_vcf:
    input:
        samples= OUT_STEP4 + "/{sample}filter.vcf.gz",
    output:
        OUT_STEP4 + "/{sample}filter.vcf.gz.tbi"
    threads:
        50
    shell:"""
        tabix -p vcf {input.samples}
    """

###############################################################################
#################         GET COMMON VARIANTS              ####################
###############################################################################

rule index_vcf:
    input:
        samples = expand("{out_dir5}/{sample}.vcf.gz.tbi", out_dir5 = OUT_STEP5, sample=SAMPLE),
    output:
        out = expand("{out_dir5}/{sample}.vcf.gz", out_dir5 = OUT_STEP5, sample=SAMPLE)
    params:
        dir = OUT_STEP5,
        c = "snps",
        t = THREADS
    threads:
        50
    shell:"""
        bcftools isec -p dir20_8419filt -c snps -O z -n~111111 --threads {params.t} \
        {input.samples} > {output.out}
    """